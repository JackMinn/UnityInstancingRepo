// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DrawPrep
#pragma kernel EditorDrawPrep
#pragma kernel ShadowDrawPrep

struct InstanceData
{
    float4x4 objectToWorld;
    float4x4 worldToObject;
    float4 instanceColor;
};


StructuredBuffer<float4> positionBuffer;
StructuredBuffer<float4> rotationBuffer;
StructuredBuffer<float4> customDataBuffer;
StructuredBuffer<float4> gpuShadowRegionPlanes;

//do I actually want to encapsulate all that inside a constant bufffer? Well.. all threads of the warp access the same values so does it matter?
cbuffer frameProperties
{
    const float4 boundingExtents;
    const float4 boundingCenter;
    const float4 screenSpaceLODSize;
    const float4 cameraData;
    const float4x4 cameraProjectionMatrix;
    const float4 frustumPlanes[6];
    const float2 screenDim;
    const uint numLODs;
    const uint4 castShadowsLOD;
    const float4 frustumBoundingSphere;
};

groupshared float4 sharedShadowRegionPlanes[12];

RWStructuredBuffer<InstanceData> lod0Buffer;
RWStructuredBuffer<InstanceData> lod1Buffer;
RWStructuredBuffer<InstanceData> lod2Buffer;
RWStructuredBuffer<InstanceData> lod3Buffer;

//for editor
RWStructuredBuffer<float> lod0IDBuffer;
RWStructuredBuffer<float> lod1IDBuffer;
RWStructuredBuffer<float> lod2IDBuffer;
RWStructuredBuffer<float> lod3IDBuffer;


void QuaternionToMatrix(float4 quaternion, out float3x3 rotationMatrix);
void InverseMatrix(float4x4 objectToWorld, out float4x4 worldToObject);
bool InsideFrustum(float4 data, float4x4 objectToWorld, float4x4 worldToObject);
bool SphereFrustumIntersectionTest(float4 data);
bool SphereToSphereFrustumTest(float3 data, float maxScale);
bool InsideShadowRegion(float4 data, float4x4 objectToWorld, float4x4 worldToObject);
uint ComputeStaticMeshLOD(float3 boundingSphereOrigin, float boundingSphereRadius);
float GetLODScreenFactor();
float ComputeBoundsScreenRadiusSquared(float3 sphereOrigin, float sphereRadius);
void ResolveAppendBuffer(uint LOD, float4x4 objectToWorld, float4x4 worldToObject, float4 data, InstanceData output);
void ResolveEditorAppendBuffer(uint LOD, float4x4 objectToWorld, float4x4 worldToObject, float4 data, InstanceData output, float instanceID);
void ResolveShadowAppendBuffer(uint LOD, float4x4 objectToWorld, float4x4 worldToObject, float4 data, InstanceData output);
float3 UnpackScaleVectorFromFloat(float value);


[numthreads(256, 1, 1)]
void DrawPrep(uint3 group_id : SV_GroupID, uint group_thread_index : SV_GroupIndex)
{
    uint instanceID = (group_id.x * 256) + group_thread_index;
    float4 data = positionBuffer[instanceID];
    float3 scale = UnpackScaleVectorFromFloat(data.w);
    float maxScale = max(max(scale.x, scale.y), scale.z);

    if (SphereToSphereFrustumTest(data.xyz, maxScale))
    {
        float3x3 rotationMatrix;
        QuaternionToMatrix(rotationBuffer[instanceID], rotationMatrix);
        float3x3 scalingMatrix;
        
        scalingMatrix._11_21_31 = float4(scale.x, 0, 0, 0);
        scalingMatrix._12_22_32 = float4(0, scale.y, 0, 0);
        scalingMatrix._13_23_33 = float4(0, 0, scale.z, 0);

        //rotationMatrix = mul(rotationMatrix, scalingMatrix);
        rotationMatrix = mul(scalingMatrix, rotationMatrix);

        float4x4 objectToWorld = 0;

        objectToWorld._11_21_31 = rotationMatrix._11_12_13;
        objectToWorld._12_22_32 = rotationMatrix._21_22_23;
        objectToWorld._13_23_33 = rotationMatrix._31_32_33;
        objectToWorld._14_24_34_44 = float4(data.xyz, 1);

        float4x4 worldToObject = 0;
        InverseMatrix(objectToWorld, worldToObject);

        float4 color = customDataBuffer[instanceID];

        //LODing code
        uint LOD = ComputeStaticMeshLOD(data.xyz, boundingExtents.w * maxScale);

        InstanceData output;
        output.objectToWorld = objectToWorld;
        output.worldToObject = worldToObject;
        output.instanceColor = color;

        //while loop in here to test dynamic scaling
        if (LOD != numLODs)
        {
            ResolveAppendBuffer(LOD, objectToWorld, worldToObject, data, output);
        }

    }
}


//for use in editor
[numthreads(256, 1, 1)]
void EditorDrawPrep(uint3 group_id : SV_GroupID, uint group_thread_index : SV_GroupIndex)
{
    uint instanceID = (group_id.x * 256) + group_thread_index;
    float4 data = positionBuffer[instanceID];
    float3 scale = UnpackScaleVectorFromFloat(data.w);
    float maxScale = max(max(scale.x, scale.y), scale.z);

    if (SphereToSphereFrustumTest(data.xyz, maxScale))
    {
        float3x3 rotationMatrix;
        QuaternionToMatrix(rotationBuffer[instanceID], rotationMatrix);
        float3x3 scalingMatrix;
        scalingMatrix._11_21_31 = float4(scale.x, 0, 0, 0);
        scalingMatrix._12_22_32 = float4(0, scale.y, 0, 0);
        scalingMatrix._13_23_33 = float4(0, 0, scale.z, 0);

        //rotationMatrix = mul(rotationMatrix, scalingMatrix);
        rotationMatrix = mul(scalingMatrix, rotationMatrix);

        float4x4 objectToWorld = 0;

        objectToWorld._11_21_31 = rotationMatrix._11_12_13;
        objectToWorld._12_22_32 = rotationMatrix._21_22_23;
        objectToWorld._13_23_33 = rotationMatrix._31_32_33;
        objectToWorld._14_24_34_44 = float4(data.xyz, 1);

        float4x4 worldToObject = 0;
        InverseMatrix(objectToWorld, worldToObject);

        float4 color = customDataBuffer[instanceID];

        //LODing code
        uint LOD = ComputeStaticMeshLOD(data.xyz, boundingExtents.w * maxScale);

        InstanceData output;
        output.objectToWorld = objectToWorld;
        output.worldToObject = worldToObject;
        output.instanceColor = color;

        //while loop in here to test dynamic scaling
        if (LOD != numLODs)
        {
            ResolveEditorAppendBuffer(LOD, objectToWorld, worldToObject, data, output, (float) instanceID);
        }
    }
}


//might be best to have the kernel spawn other kernels, divide the space into a quad tree and you can cull accordingly
[numthreads(256, 1, 1)]
void ShadowDrawPrep(uint3 group_id : SV_GroupID, uint group_thread_index : SV_GroupIndex)
{
    if (group_thread_index < 12)
    {
        sharedShadowRegionPlanes[group_thread_index] = gpuShadowRegionPlanes[group_thread_index];
    }
    GroupMemoryBarrierWithGroupSync();

    uint instanceID = (group_id.x * 256) + group_thread_index;
    float4 data = positionBuffer[instanceID];
    float3 scale = UnpackScaleVectorFromFloat(data.w);
    float maxScale = max(max(scale.x, scale.y), scale.z);

    float3x3 rotationMatrix;
    QuaternionToMatrix(rotationBuffer[instanceID], rotationMatrix);
    float3x3 scalingMatrix;
    scalingMatrix._11_21_31 = float4(scale.x, 0, 0, 0);
    scalingMatrix._12_22_32 = float4(0, scale.y, 0, 0);
    scalingMatrix._13_23_33 = float4(0, 0, scale.z, 0);

    //rotationMatrix = mul(rotationMatrix, scalingMatrix);
    rotationMatrix = mul(scalingMatrix, rotationMatrix);

    float4x4 objectToWorld = 0;

    objectToWorld._11_21_31 = rotationMatrix._11_12_13;
    objectToWorld._12_22_32 = rotationMatrix._21_22_23;
    objectToWorld._13_23_33 = rotationMatrix._31_32_33;
    objectToWorld._14_24_34_44 = float4(data.xyz, 1);

    float4x4 worldToObject = 0;
    InverseMatrix(objectToWorld, worldToObject);

    float4 color = customDataBuffer[instanceID];

    //LODing code
    uint LOD = ComputeStaticMeshLOD(data.xyz, boundingExtents.w * maxScale);

    InstanceData output;
    output.objectToWorld = objectToWorld;
    output.worldToObject = worldToObject;
    output.instanceColor = color;

    if (LOD != numLODs)
    {
        float shadowDistance = distance(data.xyz, cameraData.xyz);
        if (shadowDistance < 350)
            ResolveShadowAppendBuffer(LOD, objectToWorld, worldToObject, data, output);
    }
}

void QuaternionToMatrix(float4 quaternion, out float3x3 rotationMatrix)
{
    float xx = quaternion.x * quaternion.x;
    float xy = quaternion.x * quaternion.y;
    float xz = quaternion.x * quaternion.z;
    float xw = quaternion.x * quaternion.w;
    float yy = quaternion.y * quaternion.y;
    float yz = quaternion.y * quaternion.z;
    float yw = quaternion.y * quaternion.w;
    float zz = quaternion.z * quaternion.z;
    float zw = quaternion.z * quaternion.w;

    rotationMatrix = float3x3(1 - 2 * yy - 2 * zz, 2 * xy + 2 * zw, 2 * xz - 2 * yw,
                              2 * xy - 2 * zw, 1 - 2 * xx - 2 * zz, 2 * yz + 2 * xw,
                              2 * xz + 2 * yw, 2 * yz - 2 * xw, 1 - 2 * xx - 2 * yy
                             );
}

void InverseMatrix(float4x4 objectToWorld, out float4x4 worldToObject)
{
     // inverse transform matrix
    float3x3 w2oRotation;
    w2oRotation[0] = objectToWorld[1].yzx * objectToWorld[2].zxy - objectToWorld[1].zxy * objectToWorld[2].yzx;
    w2oRotation[1] = objectToWorld[0].zxy * objectToWorld[2].yzx - objectToWorld[0].yzx * objectToWorld[2].zxy;
    w2oRotation[2] = objectToWorld[0].yzx * objectToWorld[1].zxy - objectToWorld[0].zxy * objectToWorld[1].yzx;
 
    float det = dot(objectToWorld[0].xyz, w2oRotation[0]);
   
    w2oRotation = transpose(w2oRotation);
    w2oRotation *= rcp(det);
 
    //translate back to object space by applying the negative translation transformed
    float3 w2oPosition = mul(w2oRotation, -objectToWorld._14_24_34);
 
    worldToObject._11_21_31_41 = float4(w2oRotation._11_21_31, 0.0f);
    worldToObject._12_22_32_42 = float4(w2oRotation._12_22_32, 0.0f);
    worldToObject._13_23_33_43 = float4(w2oRotation._13_23_33, 0.0f);
    worldToObject._14_24_34_44 = float4(w2oPosition, 1.0f);
}

bool InsideFrustum(float4 data, float4x4 objectToWorld, float4x4 worldToObject)
{
    for (int i = 0; i < 6; i++)
    {
        float4 objectSpaceFrustumPlane = frustumPlanes[i].xyzw;
        float3 pointOnPlane = -objectSpaceFrustumPlane.xyz * objectSpaceFrustumPlane.w; // plane normal * d gives point on plane

        objectSpaceFrustumPlane.xyz = mul(objectSpaceFrustumPlane.xyz, (float3x3) objectToWorld);  // convert plane normal to object space with inverse transpose

        pointOnPlane = mul(worldToObject, float4(pointOnPlane, 1)).xyz;  // convert pointOnPlane from world space to object space

        //there are 8 possible combinations, one for each vertex of the bounding box, this picks the vertex the closest to the center of the frustum
        //NOTE: its not the actual closest point to the plane, its the closest to the center of the frustum in the direction of the plane normal
        float3 closestPoint;
        closestPoint.x = objectSpaceFrustumPlane.x >= 0 ? boundingCenter.x + boundingExtents.x : boundingCenter.x - boundingExtents.x;
        closestPoint.y = objectSpaceFrustumPlane.y >= 0 ? boundingCenter.y + boundingExtents.y : boundingCenter.y - boundingExtents.y;
        closestPoint.z = objectSpaceFrustumPlane.z >= 0 ? boundingCenter.z + boundingExtents.z : boundingCenter.z - boundingExtents.z;

        float3 boxToPlaneVector = closestPoint - pointOnPlane;
        if (dot(boxToPlaneVector, objectSpaceFrustumPlane.xyz) < 0)
        {
            return false;
        }
    }

    return true;
}

//assumes uniform scaling, but later data.w will contain 4 values packed in 1 float
bool SphereToSphereFrustumTest(float3 data, float maxScale)
{
    float objectRadius = boundingExtents.w * maxScale;
    float d = distance(frustumBoundingSphere.xyz, data.xyz);
    if (d > (objectRadius + frustumBoundingSphere.w))
    {
        return false;
    }
    else
    {
        return true;
    }
}

//assumes uniform scaling, but later data.w will contain 4 values packed in 1 float
bool SphereFrustumIntersectionTest(float3 data, float maxScale)
{
    float radius = boundingExtents.w * maxScale;

    for (int i = 0; i < 6; i++)
    {
        float4 objectSpaceFrustumPlane = frustumPlanes[i].xyzw;

        if (dot(data.xyz, -objectSpaceFrustumPlane.xyz) - objectSpaceFrustumPlane.w - radius > 0)
        {
            return false;
        }
    }

    return true;
}

//Assumes uniform scale with scale in w component
bool InsideShadowRegion(float4 data, float4x4 objectToWorld, float4x4 worldToObject)
{
    //accessing shared memory like this is okay because all threads in the warp access the same banks so the result is a broadcast, no conflict
    for (int i = 1; i <= sharedShadowRegionPlanes[0].x; i++)
    {
        float4 objectSpacePlane = sharedShadowRegionPlanes[i];
        float3 pointOnPlane = -objectSpacePlane.xyz * objectSpacePlane.w;

        objectSpacePlane.xyz = mul(objectSpacePlane.xyz, (float3x3) objectToWorld);
        pointOnPlane = mul(worldToObject, float4(pointOnPlane, 1)).xyz;

        //there are 8 possible combinations, one for each vertex of the bounding box, this picks the vertex the closest to the center of the frustum
        //note that its not the actual closest point to the plane, its the closest to the center of the frustum in the direction of the plane normal
        float3 closestPoint;

        closestPoint.x = objectSpacePlane.x >= 0 ? boundingCenter.x + boundingExtents.x : boundingCenter.x - boundingExtents.x;
        closestPoint.y = objectSpacePlane.y >= 0 ? boundingCenter.y + boundingExtents.y : boundingCenter.y - boundingExtents.y;
        closestPoint.z = objectSpacePlane.z >= 0 ? boundingCenter.z + boundingExtents.z : boundingCenter.z - boundingExtents.z;

        float3 boxToPlaneVector = closestPoint - pointOnPlane;
        if (dot(boxToPlaneVector, objectSpacePlane.xyz) < 0)
        {
            return false;
        }
    }

    return true;
}


inline uint ComputeStaticMeshLOD(float3 boundingSphereOrigin, float boundingSphereRadius)
{
    float LODScreenFactor = GetLODScreenFactor();
    float screenRadiusSquared = ComputeBoundsScreenRadiusSquared(boundingSphereOrigin, boundingSphereRadius) * LODScreenFactor * LODScreenFactor;
    uint LOD = numLODs;

    //Walk backwards and return the first matching LOD - this can maybe be optimized better?
    for (int i = numLODs - 1; i >= 0; i--)
    {
        if (screenRadiusSquared > screenSpaceLODSize[i])
        {
            LOD = i;
        }
    }

    return LOD;
}

inline float GetLODScreenFactor()
{
    float screenScaleX = cameraProjectionMatrix._11;
    float screenScaleY = cameraProjectionMatrix._22;

    float screenMultiple = max(screenDim.x * 0.5f * screenScaleX, screenDim.y * 0.5f * screenScaleY);
    float screenFactor = screenMultiple * screenMultiple * (1.0f / (screenDim.x * screenDim.y));
    return screenFactor;
}

inline float ComputeBoundsScreenRadiusSquared(float3 sphereOrigin, float sphereRadius)
{
    float distanceSquared = distance(sphereOrigin, cameraData.xyz);
    distanceSquared = distanceSquared * distanceSquared;

    float screenMultiple = max(0.5f * cameraProjectionMatrix._11, 0.5f * cameraProjectionMatrix._22);

    float projectedRadius = (screenMultiple * screenMultiple) * (sphereRadius * sphereRadius) / max(1.0f, distanceSquared);

    return projectedRadius;
}

void ResolveAppendBuffer(uint LOD, float4x4 objectToWorld, float4x4 worldToObject, float4 data, InstanceData output)
{
    if (LOD == 0)
    {
        if (InsideFrustum(data, objectToWorld, worldToObject))
        {
            uint counter = lod0Buffer.IncrementCounter();
            lod0Buffer[counter] = output;
        }
    }
    
    if (numLODs > 1)
    {
        if (LOD == 1)
        {
            if (InsideFrustum(data, objectToWorld, worldToObject))
            {
                uint counter = lod1Buffer.IncrementCounter();
                lod1Buffer[counter] = output;
            }
        }
    }

    if (numLODs > 2)
    {
        if (LOD == 2)
        {
            if (InsideFrustum(data, objectToWorld, worldToObject))
            {
                uint counter = lod2Buffer.IncrementCounter();
                lod2Buffer[counter] = output;
            }
        }
    }

    if (numLODs > 3)
    {
        if (LOD == 3)
        {
            if (InsideFrustum(data, objectToWorld, worldToObject))
            {
                uint counter = lod3Buffer.IncrementCounter();
                lod3Buffer[counter] = output;
            }
        }
    }
}

void ResolveEditorAppendBuffer(uint LOD, float4x4 objectToWorld, float4x4 worldToObject, float4 data, InstanceData output, float instanceID)
{
    if (LOD == 0)
    {
        if (InsideFrustum(data, objectToWorld, worldToObject))
        {
            uint counter = lod0Buffer.IncrementCounter();
            lod0Buffer[counter] = output;
            lod0IDBuffer[counter] = instanceID;
        }
    }
    
    if (numLODs > 1)
    {
        if (LOD == 1)
        {
            if (InsideFrustum(data, objectToWorld, worldToObject))
            {
                uint counter = lod1Buffer.IncrementCounter();
                lod1Buffer[counter] = output;
                lod1IDBuffer[counter] = instanceID;
            }
        }
    }

    if (numLODs > 2)
    {
        if (LOD == 2)
        {
            if (InsideFrustum(data, objectToWorld, worldToObject))
            {
                uint counter = lod2Buffer.IncrementCounter();
                lod2Buffer[counter] = output;
                lod2IDBuffer[counter] = instanceID;
            }
        }
    }

    if (numLODs > 3)
    {
        if (LOD == 3)
        {
            if (InsideFrustum(data, objectToWorld, worldToObject))
            {
                uint counter = lod3Buffer.IncrementCounter();
                lod3Buffer[counter] = output;
                lod3IDBuffer[counter] = instanceID;
            }
        }
    }
}

void ResolveShadowAppendBuffer(uint LOD, float4x4 objectToWorld, float4x4 worldToObject, float4 data, InstanceData output)
{
    if (LOD == 0)
    {
        if (castShadowsLOD[LOD] != 0)
        {
            //objects in the frustum are already in the append buffer, we are adding on not starting from scratch
            if (!InsideFrustum(data, objectToWorld, worldToObject))
            {
                if (InsideShadowRegion(data, objectToWorld, worldToObject))
                {
                    uint counter = lod0Buffer.IncrementCounter();
                    lod0Buffer[counter] = output;
                }
            }
        }
    }
    
    if (numLODs > 1)
    {
        if (LOD == 1)
        {
            if (castShadowsLOD[LOD] != 0)
            {
                if (!InsideFrustum(data, objectToWorld, worldToObject))
                {
                    if (InsideShadowRegion(data, objectToWorld, worldToObject))
                    {
                        uint counter = lod1Buffer.IncrementCounter();
                        lod1Buffer[counter] = output;
                    }
                }
            }
        }
    }

    if (numLODs > 2)
    {
        if (LOD == 2)
        {
            if (castShadowsLOD[LOD] != 0)
            {
                if (!InsideFrustum(data, objectToWorld, worldToObject))
                {
                    if (InsideShadowRegion(data, objectToWorld, worldToObject))
                    {
                        uint counter = lod2Buffer.IncrementCounter();
                        lod2Buffer[counter] = output;
                    }
                }
            }
        }
    }

    if (numLODs > 3)
    {
        if (LOD == 3)
        {
            if (castShadowsLOD[LOD] != 0)
            {
                if (!InsideFrustum(data, objectToWorld, worldToObject))
                {
                    if (InsideShadowRegion(data, objectToWorld, worldToObject))
                    {
                        uint counter = lod3Buffer.IncrementCounter();
                        lod3Buffer[counter] = output;
                    }
                }
            }
        }
    }
}


float3 UnpackScaleVectorFromFloat(float value)
{
    float x = fmod(value, 255.0) / 255.0;
    value = floor(value / 255.0);
    float y = fmod(value, 255.0) / 255.0;
    value = floor(value / 255.0);
    float z = fmod(value, 255.0) / 255.0;

    value = floor(value / 255.0);
    float max = value;

    float3 scale = float3(x * max, y * max, z * max);
    return scale;
}












////Assumes uniform scale with scale in w component
//bool DeprecatedInsideFrustum(float4 data, float4x4 objectToWorld, float4x4 worldToObject)
//{
//    //boundingExtents has x extents, y extents, z extents
//    float3 scaledExtents = boundingExtents.xyz * data.w;
//    float3 maxPoints = data.xyz + scaledExtents;
//    float3 minPoints = data.xyz - scaledExtents;


//    for (int i = 0; i < 6; i++)
//    {
//        float3 closestPoint = minPoints;
//        float4 objectSpaceFrustumPlane = frustumPlanes[i].xyzw;

//        //there are 8 possible combinations, one for each vertex of the bounding box, this picks the vertex the closest to the center of the frustum
//        //note that its not the actual closest point to the plane, its the closest to the center of the frustum in the direction of the plane normal
//        closestPoint.x = objectSpaceFrustumPlane.x >= 0 ? maxPoints.x : closestPoint.x;
//        closestPoint.y = objectSpaceFrustumPlane.y >= 0 ? maxPoints.y : closestPoint.y;
//        closestPoint.z = objectSpaceFrustumPlane.z >= 0 ? maxPoints.z : closestPoint.z;

//        if (dot(closestPoint, -objectSpaceFrustumPlane.xyz) - objectSpaceFrustumPlane.w > 0)
//        {
//            return false;
//        }
//    }

//    return true;
//}
